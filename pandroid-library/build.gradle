apply plugin: 'com.android.library'
apply from: 'dagger.gradle'

apply from: file('../delivery.gradle')

android {
    compileSdkVersion Integer.parseInt(androidSdkVersion)

    defaultConfig {
        minSdkVersion Integer.parseInt(androidMinSdkVersion)
        targetSdkVersion Integer.parseInt(androidSdkVersion)
        versionCode Integer.parseInt(pandroidVersionId)
        versionName pandroidVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), './pandroid-proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'InvalidPackage'
        disable 'MissingPermission'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


}



dependencies {

    //Core
    api project(':pandroid-java')
    annotationProcessor project(':pandroid-compiler')
    compileOnly project(':pandroid-annotations')
    api "androidx.annotation:annotation:1.1.0"
    api "androidx.appcompat:appcompat:1.1.0"
    api "androidx.cardview:cardview:1.0.0"
    api "androidx.gridlayout:gridlayout:1.0.0"
    api "androidx.palette:palette:1.0.0"
    api "androidx.recyclerview:recyclerview:1.0.0"
    api "com.google.android.material:material:1.0.0"

    //Test
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.3.1'

    testImplementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    testImplementation "io.reactivex.rxjava2:rxjava:2.2.13"

    //Support to simulate plugin work
    //Optional library have to be declared in pandroid.gradle
    optionalLibs.each {
        libDep ->
            compileOnly(libDep) {
                transitive = true
            }
    }
    annotationProcessor "frankiesardo:icepick-processor:3.2.0"
    annotationProcessor "com.jakewharton:butterknife-compiler:10.2.0"
    annotationProcessor "com.github.bumptech.glide:compiler:4.10.0"

    compileOnly 'org.jetbrains:annotations-java5:17.0.0'
}

//configure template with delivery

def zipTemplatesTask = project(":pandroid-demo").getTasksByName("zipTemplates", false)
task buildTemplate(type: DeliveryBuild, dependsOn: zipTemplatesTask) {
    variantName = project.name
    outputFiles = ["templates": zipTemplatesTask.outputs.files.singleFile.first()]
}
