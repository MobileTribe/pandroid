dependencies {
    annotationProcessor "com.leroymerlin.pandroid:pandroid-compiler:$pandroidVersion"
    api "com.leroymerlin.pandroid:pandroid-library:$pandroidVersion"
    compileOnly "com.leroymerlin.pandroid:pandroid-annotations:$pandroidVersion"
}

plugins.withId('kotlin-android') {
    dependencies {
        implementation 'androidx.core:core-ktx:1.0.0'
        implementation "com.leroymerlin.pandroid:pandroid-kotlin:$pandroidVersion"
    }
}

plugins.withId('com.leroymerlin.android-templates') {
    dependencies {
        template "com.leroymerlin.pandroid:pandroid-library:$pandroidVersion:templates"
    }
}

//tag::Proguard[]
android {

    lintOptions {
        disable 'InvalidPackage'
    }

    buildTypes {
        all {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'build/pandroid/pandroid-proguard-rules.pro'
            if (file('proguard-rules.pro').exists()) {
                proguardFiles 'proguard-rules.pro'
            }
        }
        if (!plugins.hasPlugin("com.android.library")) {
            release {
                minifyEnabled true
            }
        }
    }

}

//end::Proguard[]


pandroid {

    configurators {
        "io.reactivex.rxjava2:rxandroid" { //RX
            gradle {
                dependencies {
                    implementation "io.reactivex.rxjava2:rxandroid:$libraryRxAndroidVersion"
                    implementation "io.reactivex.rxjava2:rxjava:$libraryRxJavaVersion"
                    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
                }
            }
        }

        "com.jakewharton:butterknife" { // ButterknifeLifecycleDelegate
            gradle {
                dependencies {
                    implementation "com.jakewharton:butterknife:$libraryButterknifeVersion"
                    annotationProcessor "com.jakewharton:butterknife-compiler:$libraryButterknifeVersion"

                }
            }
        }
        "com.github.frankiesardo:icepick" { // IcepickLifecycleDelegate
            gradle {
                repositories {
                    maven { url "https://clojars.org/repo/" }
                }
                dependencies {
                    implementation "frankiesardo:icepick:$libraryIcepickVersion"
                    annotationProcessor "frankiesardo:icepick-processor:$libraryIcepickVersion"
                }
            }
        }
        "com.squareup.retrofit2:retrofit" { //Retrofit
            gradle {
                dependencies {
                    implementation "com.squareup.retrofit2:retrofit:$libraryRetrofitVersion"
                    implementation "com.squareup.retrofit2:converter-gson:$libraryRetrofitVersion"
                    implementation "com.squareup.okhttp3:logging-interceptor:$libraryLoggingInterceptorVersion"
                }
            }
        }
        "com.google.android.gms:play-services-vision" { //PandroidScannerView
            gradle {
                dependencies {
                    implementation "com.google.android.gms:play-services-vision:$libraryGmsVisionVersion"
                }
            }
            manifest {
                '''
     <application>
        <meta-data
            android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version" />
        <meta-data
            android:name="com.google.android.gms.vision.DEPENDENCIES"
            android:value="barcode,face" />
     </application>
'''
            }
        }

        "com.google.firebase:firebase-core" {
            /*
Add this part in your build.gradle
//tag::FirebaseAnalytics[]
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.google.gms:google-services:3.2.0'
    }
}
//apply the plugin at the end of your build.gradle to avoid error
apply plugin 'com.google.gms.google-services'
//end::FirebaseAnalytics[]
*/
            gradle {
                dependencies {
                    implementation "com.google.firebase:firebase-core:$libraryFirebaseVersion"
                }
            }
        }
        "com.google.android.gms:play-services-analytics" { //GoogleAnalyticsManager
            gradle {
                /*
Add this part in your build.gradle
//tag::GoogleAnalytics[]
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.google.gms:google-services:3.2.0'
    }
}
//apply the plugin at the end of your build.gradle to avoid error
apply plugin 'com.google.gms.google-services'
    //end::GoogleAnalytics[]
                */

                dependencies {
                    implementation "com.google.android.gms:play-services-analytics:$libraryGmsAnalyticsVersion"
                }
            }

            manifest {
                '''
    <application>
        <meta-data
            android:name="com.google.android.gms.version"
            android:value="@integer/google_play_services_version" />
        <receiver
            android:name="com.google.android.gms.analytics.AnalyticsReceiver"
            android:enabled="true">
            <intent-filter>
                <action android:name="com.google.android.gms.analytics.ANALYTICS_DISPATCH" />
            </intent-filter>
        </receiver>
        <service
            android:name="com.google.android.gms.analytics.AnalyticsService"
            android:enabled="true"
            android:exported="false" />
     </application>
'''
            }
        }
        "com.github.johnpersano:supertoasts" { //SuperToastManagerImpl
            gradle {
                dependencies {
                    implementation("com.github.johnpersano:supertoasts:$librarySupertoastsVersion")
                }
            }
        }
        "com.github.bumptech.glide:glide" { //GlidePictureManagerImpl
            gradle {
                dependencies {
                    implementation("com.github.bumptech.glide:glide:$libraryGlideVersion")
                    implementation "com.github.bumptech.glide:annotations:$libraryGlideVersion"
                    annotationProcessor "com.github.bumptech.glide:compiler:$libraryGlideVersion"
                }
            }
            manifest {
                config ->
                    if (!config.containsKey('glideModule')) {
                        config.glideModule = "com.leroymerlin.pandroid.ui.picture.glide.PandroidGlideModule"
                    }
                    if (config.glideModule) {
                        return '''
    <application>
        <meta-data
                android:name="''' + config.glideModule + '''"
                android:value="GlideModule" />
    </application>
    
'''
                    }
            }
        }
        "com.crashlytics.sdk.android:crashlytics" { //CrashlyticsLogger
            gradle {
                /*
    Add this part in your build.gradle
    //tag::Crashlytics[]
    buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.25.2'
    }
    }
    //end::Crashlytics[]

                */
                repositories {
                    maven { url "https://maven.fabric.io/public" }
                }
                dependencies {
                    implementation("com.crashlytics.sdk.android:crashlytics:$libraryCrashlyticsVersion@aar") {
                        transitive true
                    }
                }

                if (!plugins.hasPlugin("io.fabric")) {
                    apply plugin: "io.fabric"
                }

            }
            manifest {
                config ->
                    if (config.apiKey != null) {
                        return '''
    <application>
        <meta-data
            android:name="io.fabric.ApiKey"
            android:value="''' + config.apiKey + '''" />
     </application>
'''
                    }
                    return ""
            }
        }

    }

}